#![no_main]
#![no_std]

extern crate alloc;

use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::panic::PanicInfo;
use core::str::from_utf8;
use core::usize;

use serde::Serialize;
use uefi::{Char16, CStr16, entry, Handle, prelude::RuntimeServices, print, println, Status, table::runtime::VariableKey};
use uefi::prelude::{Boot, SystemTable};

static mut ST_PTR: *mut SystemTable<Boot> = core::ptr::null_mut();

#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    println!("[FUCK] {}", info);

    unsafe {
        let st = &mut *ST_PTR;

        st.boot_services().exit(st.boot_services().image_handle(), Status::ABORTED, 0, &mut Char16::from_u16_unchecked(0))
    }
}

#[entry]
unsafe fn main(image: Handle, mut st: SystemTable<Boot>) -> Status {
    //give panic handler access to system table
    unsafe {
        ST_PTR = &mut st as *mut SystemTable<Boot>;
    }
    
    let _ = uefi::helpers::init(&mut st).expect("Unexpected error while initializing UEFI services");

    //factory
    let fd: [u8; 5018] = [154,19,0,0,0,0,0,0,146,19,0,0,0,0,0,0,121,0,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,10,121,1,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,5,15,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,2,17,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,18,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,2,27,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,32,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,39,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,48,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,48,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,53,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,255,55,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,66,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,66,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,75,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,75,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,80,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,87,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,90,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,2,91,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,113,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,114,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,115,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,116,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,117,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,118,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,119,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,120,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,5,122,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,123,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,124,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,134,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,2,135,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,139,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,143,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,159,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,169,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,225,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,226,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,227,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,228,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,229,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,230,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,231,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,234,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,235,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,15,237,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,238,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,4,0,0,0,0,0,0,0,38,38,38,0,239,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,4,0,0,0,0,0,0,0,38,38,38,0,240,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,4,0,0,0,0,0,0,0,38,38,38,0,241,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,4,0,0,0,0,0,0,0,38,38,38,0,242,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,4,0,0,0,0,0,0,0,38,38,38,0,243,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,4,0,0,0,0,0,0,0,38,38,38,0,244,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,4,0,0,0,0,0,0,0,38,38,38,0,245,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,4,0,0,0,0,0,0,0,32,40,0,0,246,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,4,0,0,0,0,0,0,0,32,40,0,0,247,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,4,0,0,0,0,0,0,0,32,40,0,0,248,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,4,0,0,0,0,0,0,0,32,40,0,0,249,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,4,0,0,0,0,0,0,0,32,40,0,0,250,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,4,0,0,0,0,0,0,0,32,40,0,0,251,4,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,4,0,0,0,0,0,0,0,32,40,0,0,53,5,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,56,5,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,2,58,5,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,63,5,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,69,5,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,95,5,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,96,5,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,97,5,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,98,5,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,100,5,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,115,5,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,134,5,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,137,5,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,143,5,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,147,5,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,163,5,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,164,5,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,166,5,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,172,5,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,255,0,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,4,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,18,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,18,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,19,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,21,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,28,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,34,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,35,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,36,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,67,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,68,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,70,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,71,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,72,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,82,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,83,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,84,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,4,85,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,32,86,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,4,87,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,32,97,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,105,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,115,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,116,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,118,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,123,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,128,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,169,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,169,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,173,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,198,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,206,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,210,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,216,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,218,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,2,224,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,225,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,228,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,228,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,236,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,236,6,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,16,7,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,4,17,7,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,50,18,7,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,2,0,0,0,0,0,0,0,90,40,34,7,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,34,7,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,35,7,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,35,7,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,37,7,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,49,7,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,51,7,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,67,7,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,78,7,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,81,7,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,4,82,7,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,32,83,7,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,84,7,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,85,7,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,86,7,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,89,7,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,97,7,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,103,7,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,104,7,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,105,7,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,106,7,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,108,7,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,121,7,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,122,7,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,124,7,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,2,125,7,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,126,7,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,142,7,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,7,10,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,114,12,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,116,12,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,118,12,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,124,12,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,31,14,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,46,14,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,119,14,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,141,14,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,2,172,14,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,3,174,14,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,189,14,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,192,14,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,214,14,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,215,14,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,216,14,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,1,218,14,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0,253,134,0,0,224,206,122,65,169,111,130,74,153,215,249,177,221,39,30,72,1,0,0,0,0,0,0,0,0];
    
    let rs: &RuntimeServices;
    let keys: Vec<VariableKey>;

    //loop vars
    let mut temp_var: UefiVar = UefiVar::default();
    let mut ucsbuf: [u8; 0xfff] = [0u8; 0xfff];

    rs = st.runtime_services();

    keys = rs.variable_keys().expect("error getting variable keys: {}");
    for k in keys.iter() {
        // println!("LOOP");
        temp_var.name = cstr16_to_string(k.name().unwrap(), &mut ucsbuf).expect("couldn't convert name to utf-8");

        let (v_data, _v_attr) = rs.get_variable_boxed(k.name().unwrap(), &k.vendor)
            .expect("error getting variable: {}");

        // temp_var.volatile = !v_attr.contains(VariableAttributes::NON_VOLATILE);
        // temp_var.bootserivce_var = v_attr.contains(VariableAttributes::BOOTSERVICE_ACCESS);
        // temp_var.bootserivce_var = v_attr.contains(VariableAttributes::RUNTIME_ACCESS);

        temp_var.data_len = v_data.len() as u64;
        temp_var.data = v_data.clone();
        
        if temp_var.name == "FactoryDefaults" {
            print!("len {};", temp_var.data.len());
            for (i, d) in temp_var.data.iter().enumerate() {
                if i < fd.len() {
                    if &fd[i] != d {
                        print!("{:x}_{:02x}>{:02x};", i, &fd[i], d)
                    }
                } else {
                    break
                }
            }
        }
    }

    loop {}
}

fn cstr16_to_string(c: &CStr16, buf: &mut [u8]) -> Result<String, ucs2::Error> {
    let len: usize = ucs2::decode(
        c.to_u16_slice(),
        buf,
    )?;
    Ok(from_utf8(&buf[..len]).unwrap().to_string())
}

#[derive(Clone, Default, Serialize)]
struct UefiVar {
    name: String,
    vendor_guid: String,

    volatile: bool,
    bootserivce_var: bool,
    runtime_var: bool,

    data_len: u64,
    data: Box<[u8]>,
}